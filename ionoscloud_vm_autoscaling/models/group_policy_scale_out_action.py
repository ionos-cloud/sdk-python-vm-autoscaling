# coding: utf-8

"""
    VM Auto Scaling service (CloudAPI)

    VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_vm_autoscaling.configuration import Configuration


class GroupPolicyScaleOutAction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'amount': 'float',

        'amount_type': 'ActionAmount',

        'cooldown_period': 'str',
    }

    attribute_map = {

        'amount': 'amount',

        'amount_type': 'amountType',

        'cooldown_period': 'cooldownPeriod',
    }

    def __init__(self, amount=None, amount_type=None, cooldown_period='5m', local_vars_configuration=None):  # noqa: E501
        """GroupPolicyScaleOutAction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._amount_type = None
        self._cooldown_period = None
        self.discriminator = None

        self.amount = amount
        self.amount_type = amount_type
        self.cooldown_period = cooldown_period


    @property
    def amount(self):
        """Gets the amount of this GroupPolicyScaleOutAction.  # noqa: E501

        When `amountType == ABSOLUTE`, this is the number of VMs added or removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the autoscaling group's current `targetReplicaCount` in order to derive the number of VMs that will be added or removed in one step. There will always be at least one VM added or removed.   For SCALE_IN operation now volumes are NOT deleted after the server deletion.  # noqa: E501

        :return: The amount of this GroupPolicyScaleOutAction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GroupPolicyScaleOutAction.

        When `amountType == ABSOLUTE`, this is the number of VMs added or removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the autoscaling group's current `targetReplicaCount` in order to derive the number of VMs that will be added or removed in one step. There will always be at least one VM added or removed.   For SCALE_IN operation now volumes are NOT deleted after the server deletion.  # noqa: E501

        :param amount: The amount of this GroupPolicyScaleOutAction.  # noqa: E501
        :type amount: float
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def amount_type(self):
        """Gets the amount_type of this GroupPolicyScaleOutAction.  # noqa: E501


        :return: The amount_type of this GroupPolicyScaleOutAction.  # noqa: E501
        :rtype: ActionAmount
        """
        return self._amount_type

    @amount_type.setter
    def amount_type(self, amount_type):
        """Sets the amount_type of this GroupPolicyScaleOutAction.


        :param amount_type: The amount_type of this GroupPolicyScaleOutAction.  # noqa: E501
        :type amount_type: ActionAmount
        """
        if self.local_vars_configuration.client_side_validation and amount_type is None:  # noqa: E501
            raise ValueError("Invalid value for `amount_type`, must not be `None`")  # noqa: E501

        self._amount_type = amount_type

    @property
    def cooldown_period(self):
        """Gets the cooldown_period of this GroupPolicyScaleOutAction.  # noqa: E501

        Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given.  # noqa: E501

        :return: The cooldown_period of this GroupPolicyScaleOutAction.  # noqa: E501
        :rtype: str
        """
        return self._cooldown_period

    @cooldown_period.setter
    def cooldown_period(self, cooldown_period):
        """Sets the cooldown_period of this GroupPolicyScaleOutAction.

        Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given.  # noqa: E501

        :param cooldown_period: The cooldown_period of this GroupPolicyScaleOutAction.  # noqa: E501
        :type cooldown_period: str
        """

        self._cooldown_period = cooldown_period
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupPolicyScaleOutAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupPolicyScaleOutAction):
            return True

        return self.to_dict() != other.to_dict()
