# coding: utf-8

"""
    VM Auto Scaling service (CloudAPI)

    VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_vm_autoscaling.configuration import Configuration


class ReplicaNic(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'lan': 'int',

        'name': 'str',

        'dhcp': 'bool',
    }

    attribute_map = {

        'lan': 'lan',

        'name': 'name',

        'dhcp': 'dhcp',
    }

    def __init__(self, lan=None, name=None, dhcp=None, local_vars_configuration=None):  # noqa: E501
        """ReplicaNic - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lan = None
        self._name = None
        self._dhcp = None
        self.discriminator = None

        self.lan = lan
        self.name = name
        self.dhcp = dhcp


    @property
    def lan(self):
        """Gets the lan of this ReplicaNic.  # noqa: E501

        Lan ID for this replica Nic.  # noqa: E501

        :return: The lan of this ReplicaNic.  # noqa: E501
        :rtype: int
        """
        return self._lan

    @lan.setter
    def lan(self, lan):
        """Sets the lan of this ReplicaNic.

        Lan ID for this replica Nic.  # noqa: E501

        :param lan: The lan of this ReplicaNic.  # noqa: E501
        :type lan: int
        """
        if self.local_vars_configuration.client_side_validation and lan is None:  # noqa: E501
            raise ValueError("Invalid value for `lan`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                lan is not None and lan < 1):  # noqa: E501
            raise ValueError("Invalid value for `lan`, must be a value greater than or equal to `1`")  # noqa: E501

        self._lan = lan

    @property
    def name(self):
        """Gets the name of this ReplicaNic.  # noqa: E501

        Name for this replica NIC.  # noqa: E501

        :return: The name of this ReplicaNic.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReplicaNic.

        Name for this replica NIC.  # noqa: E501

        :param name: The name of this ReplicaNic.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def dhcp(self):
        """Gets the dhcp of this ReplicaNic.  # noqa: E501

        Dhcp flag for this replica Nic. This is an optional attribute with default value of 'true' if not given in the request payload or given as null.  # noqa: E501

        :return: The dhcp of this ReplicaNic.  # noqa: E501
        :rtype: bool
        """
        return self._dhcp

    @dhcp.setter
    def dhcp(self, dhcp):
        """Sets the dhcp of this ReplicaNic.

        Dhcp flag for this replica Nic. This is an optional attribute with default value of 'true' if not given in the request payload or given as null.  # noqa: E501

        :param dhcp: The dhcp of this ReplicaNic.  # noqa: E501
        :type dhcp: bool
        """

        self._dhcp = dhcp
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicaNic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplicaNic):
            return True

        return self.to_dict() != other.to_dict()
