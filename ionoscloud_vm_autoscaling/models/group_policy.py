# coding: utf-8

"""
    VM Auto Scaling service (CloudAPI)

    VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_vm_autoscaling.configuration import Configuration


class GroupPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'metric': 'Metric',

        'range': 'str',

        'scale_in_action': 'GroupPolicyScaleInAction',

        'scale_in_threshold': 'float',

        'scale_out_action': 'GroupPolicyScaleOutAction',

        'scale_out_threshold': 'float',

        'unit': 'QueryUnit',
    }

    attribute_map = {

        'metric': 'metric',

        'range': 'range',

        'scale_in_action': 'scaleInAction',

        'scale_in_threshold': 'scaleInThreshold',

        'scale_out_action': 'scaleOutAction',

        'scale_out_threshold': 'scaleOutThreshold',

        'unit': 'unit',
    }

    def __init__(self, metric=None, range='120s', scale_in_action=None, scale_in_threshold=None, scale_out_action=None, scale_out_threshold=None, unit=None, local_vars_configuration=None):  # noqa: E501
        """GroupPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._metric = None
        self._range = None
        self._scale_in_action = None
        self._scale_in_threshold = None
        self._scale_out_action = None
        self._scale_out_threshold = None
        self._unit = None
        self.discriminator = None

        self.metric = metric
        if range is not None:
            self.range = range
        self.scale_in_action = scale_in_action
        self.scale_in_threshold = scale_in_threshold
        self.scale_out_action = scale_out_action
        self.scale_out_threshold = scale_out_threshold
        self.unit = unit


    @property
    def metric(self):
        """Gets the metric of this GroupPolicy.  # noqa: E501


        :return: The metric of this GroupPolicy.  # noqa: E501
        :rtype: Metric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this GroupPolicy.


        :param metric: The metric of this GroupPolicy.  # noqa: E501
        :type metric: Metric
        """
        if self.local_vars_configuration.client_side_validation and metric is None:  # noqa: E501
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    @property
    def range(self):
        """Gets the range of this GroupPolicy.  # noqa: E501

        Defines the time range, for which the samples will be aggregated.  # noqa: E501

        :return: The range of this GroupPolicy.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this GroupPolicy.

        Defines the time range, for which the samples will be aggregated.  # noqa: E501

        :param range: The range of this GroupPolicy.  # noqa: E501
        :type range: str
        """

        self._range = range

    @property
    def scale_in_action(self):
        """Gets the scale_in_action of this GroupPolicy.  # noqa: E501


        :return: The scale_in_action of this GroupPolicy.  # noqa: E501
        :rtype: GroupPolicyScaleInAction
        """
        return self._scale_in_action

    @scale_in_action.setter
    def scale_in_action(self, scale_in_action):
        """Sets the scale_in_action of this GroupPolicy.


        :param scale_in_action: The scale_in_action of this GroupPolicy.  # noqa: E501
        :type scale_in_action: GroupPolicyScaleInAction
        """
        if self.local_vars_configuration.client_side_validation and scale_in_action is None:  # noqa: E501
            raise ValueError("Invalid value for `scale_in_action`, must not be `None`")  # noqa: E501

        self._scale_in_action = scale_in_action

    @property
    def scale_in_threshold(self):
        """Gets the scale_in_threshold of this GroupPolicy.  # noqa: E501

        The lower threshold for the value of the `metric`. Will be used with `less than` (<) operator. Exceeding this will start a Scale-In action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.  # noqa: E501

        :return: The scale_in_threshold of this GroupPolicy.  # noqa: E501
        :rtype: float
        """
        return self._scale_in_threshold

    @scale_in_threshold.setter
    def scale_in_threshold(self, scale_in_threshold):
        """Sets the scale_in_threshold of this GroupPolicy.

        The lower threshold for the value of the `metric`. Will be used with `less than` (<) operator. Exceeding this will start a Scale-In action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.  # noqa: E501

        :param scale_in_threshold: The scale_in_threshold of this GroupPolicy.  # noqa: E501
        :type scale_in_threshold: float
        """
        if self.local_vars_configuration.client_side_validation and scale_in_threshold is None:  # noqa: E501
            raise ValueError("Invalid value for `scale_in_threshold`, must not be `None`")  # noqa: E501

        self._scale_in_threshold = scale_in_threshold

    @property
    def scale_out_action(self):
        """Gets the scale_out_action of this GroupPolicy.  # noqa: E501


        :return: The scale_out_action of this GroupPolicy.  # noqa: E501
        :rtype: GroupPolicyScaleOutAction
        """
        return self._scale_out_action

    @scale_out_action.setter
    def scale_out_action(self, scale_out_action):
        """Sets the scale_out_action of this GroupPolicy.


        :param scale_out_action: The scale_out_action of this GroupPolicy.  # noqa: E501
        :type scale_out_action: GroupPolicyScaleOutAction
        """
        if self.local_vars_configuration.client_side_validation and scale_out_action is None:  # noqa: E501
            raise ValueError("Invalid value for `scale_out_action`, must not be `None`")  # noqa: E501

        self._scale_out_action = scale_out_action

    @property
    def scale_out_threshold(self):
        """Gets the scale_out_threshold of this GroupPolicy.  # noqa: E501

        The upper threshold for the value of the `metric`.  Will be used with `greater than` (>) operator. Exceeding this will start a Scale-Out action as specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold` depending on the `metric` to avoid competitive actions at the same time.  # noqa: E501

        :return: The scale_out_threshold of this GroupPolicy.  # noqa: E501
        :rtype: float
        """
        return self._scale_out_threshold

    @scale_out_threshold.setter
    def scale_out_threshold(self, scale_out_threshold):
        """Sets the scale_out_threshold of this GroupPolicy.

        The upper threshold for the value of the `metric`.  Will be used with `greater than` (>) operator. Exceeding this will start a Scale-Out action as specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold` depending on the `metric` to avoid competitive actions at the same time.  # noqa: E501

        :param scale_out_threshold: The scale_out_threshold of this GroupPolicy.  # noqa: E501
        :type scale_out_threshold: float
        """
        if self.local_vars_configuration.client_side_validation and scale_out_threshold is None:  # noqa: E501
            raise ValueError("Invalid value for `scale_out_threshold`, must not be `None`")  # noqa: E501

        self._scale_out_threshold = scale_out_threshold

    @property
    def unit(self):
        """Gets the unit of this GroupPolicy.  # noqa: E501


        :return: The unit of this GroupPolicy.  # noqa: E501
        :rtype: QueryUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GroupPolicy.


        :param unit: The unit of this GroupPolicy.  # noqa: E501
        :type unit: QueryUnit
        """
        if self.local_vars_configuration.client_side_validation and unit is None:  # noqa: E501
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupPolicy):
            return True

        return self.to_dict() != other.to_dict()
